-- @atlcompiler atl2010
-- @path Java=/org.eclipse.gmt.modisco.java/model/java.ecore


module Refactoring;
create OUT: Java refining IN: Java;

helper context Java!MethodDeclaration def: isMainMethod(): Boolean =
	if self.name = 'main' then
		true
	else
		false
	endif;

helper context Java!MethodDeclaration def: hasMoreThanOneStatement(): Boolean =
	if(self.body.oclIsUndefined()) then
		false
	else 
		if(self.body.statements.oclIsUndefined()) then
			false
		else
			if (self.body.statements -> size() > 1) then
				true
			else
				false
			endif
		endif
	endif;

helper context Java!MethodDeclaration def: isReturnStatement(): Boolean =
	if (not self.oclIsUndefined() and 
		not	self.body.oclIsUndefined() and
		not self.body.statements.oclIsUndefined() and
		not self.body.statements->first().oclIsUndefined() and 
		self.body.statements->first().oclIsTypeOf(Java!ReturnStatement)) then
		true
	else
		false
	endif;

helper context Java!MethodDeclaration def: isNotMemberOfProjectPackage(): Boolean =
	if (self.proxy.oclIsUndefined()) then
		false
	else 
		self.proxy
	endif;


rule RemoveInnerMethod {
	from 
		inputMethod: Java!MethodDeclaration (
			 not inputMethod.isMainMethod() and
			 not inputMethod.isNotMemberOfProjectPackage() and
			 not inputMethod.hasMoreThanOneStatement() and
			 inputMethod.isReturnStatement()
		)
	to
		outputMethod: Java!MethodDeclaration(
			name <- 'will_' + inputMethod.name
--			body <- updatedBody
--		),
--		updatedBody : Java!Block(
--			originalCompilationUnit <- inputMethod.originalCompilationUnit,
--			statements <- inputMethod.body.statements->selectByType(Java!ReturnStatement)->first().expression->selectByType(Java!MethodInvocation).method.statements
		)		
}