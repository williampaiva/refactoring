-- @atlcompiler atl2010
-- @path Java=/org.eclipse.gmt.modisco.java/model/java.ecore


module Refactoring;
create OUT: Java refining IN: Java;

helper context Java!FieldDeclaration def: hasGetter() : Boolean = 
	self.abstractTypeDeclaration.bodyDeclarations
	->select(d | d.oclIsTypeOf(Java!MethodDeclaration))
	->select(md | md.name.startsWith(
		let fieldName : String = self.fragments->first().name 
		in
			'get' + fieldName.substring(1,1).toUpper() + fieldName.substring(2,fieldName.size())
		))
	->notEmpty();

helper context String def: firstToUpper() : String =
	self.substring(1, 1).toUpper() + self.substring(2, self.size());

rule CreateGetter{
	from
		sourceField : Java!FieldDeclaration(
			not sourceField.hasGetter()	
		)
	to
		-- Change member visibility - public to private
		updatedField: Java!FieldDeclaration(
			modifier <- fieldModifier
		),
		fieldModifier : Java!Modifier (
			visibility <- #private	
		),
		
		-- Generate getter
		getter : Java!MethodDeclaration (
			abstractTypeDeclaration <- sourceField.abstractTypeDeclaration,
			originalCompilationUnit <- sourceField.originalCompilationUnit,
			name <- 'get' + sourceField.fragments->first().name.firstToUpper(),
			modifier <- getterModifier,
			returnType <- getterReturnType,
			body <- getterBlock
		),
		getterModifier : Java!Modifier (
			visibility <- #public	
		),
		getterReturnType : Java!TypeAccess (
			type <- if not sourceField.type.oclIsUndefined() then
						sourceField.type.type
					else
						OclUndefined
					endif
		),
		getterBlock : Java!Block (
			originalCompilationUnit <- sourceField.originalCompilationUnit,
			statements <- Sequence{getterBlockReturnStatement}
		),
		getterBlockReturnStatement : Java!ReturnStatement (
			originalCompilationUnit <- sourceField.originalCompilationUnit,
			expression <- getReturnExpression
		),
		getReturnExpression : Java!FieldAccess (
			originalCompilationUnit <- sourceField.originalCompilationUnit,
			field <- getStringVariableAccess,
			expression <- getExpression
		),
		getStringVariableAccess : Java!SingleVariableAccess (
			variable <- sourceField.fragments->first()	
		),
		getExpression : Java!ThisExpression (
			originalCompilationUnit <- sourceField.originalCompilationUnit
		),
		
		--generate setter
		setter : Java!MethodDeclaration (
			abstractTypeDeclaration <- sourceField.abstractTypeDeclaration,
			originalCompilationUnit <- sourceField.originalCompilationUnit,
			name <- 'set' + sourceField.fragments->first().name.firstToUpper(),
			modifier <- setterModifier,
			body <- setterBlock,
			parameters <- setterParameter
		),
		setterModifier : Java!Modifier (
			visibility <- #public	
		),
		setterBlock : Java!Block (
			originalCompilationUnit <- sourceField.originalCompilationUnit,
			statements <- Sequence{setterBlockExpressionStatement}
		),
		setterBlockExpressionStatement : Java!ExpressionStatement (
			originalCompilationUnit <- sourceField.originalCompilationUnit,
			expression <- setAssigmentExpression
		),
		setAssigmentExpression : Java!Assignment (
			originalCompilationUnit <- sourceField.originalCompilationUnit,
			leftHandSide <- setLeftHandSide,
			rightHandSide <- setRightHandSide
		),
		setLeftHandSide : Java!FieldAccess(
			originalCompilationUnit <- sourceField.originalCompilationUnit,
			field <- setFieldLeftHandSide,
			expression <- setExpression
		),
		setFieldLeftHandSide : Java!SingleVariableAccess(
			variable <- sourceField.fragments->first()
		),
		setExpression : Java!ThisExpression (
			originalCompilationUnit <- sourceField.originalCompilationUnit
		),
		setRightHandSide: Java!SingleVariableAccess (
			variable <- sourceField.fragments->first()	
		),
		setterParameter : Java!SingleVariableDeclaration (
			originalCompilationUnit <- sourceField.originalCompilationUnit,
			type <- sourceField.type,
			name <- sourceField.fragments->first().name
		)
}